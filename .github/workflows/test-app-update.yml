name: Build and Publish Test App Update

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
      force_update:
        description: 'Force users to update (true/false)'
        required: true
        default: false
        type: boolean

# Grant permissions for the GITHUB_TOKEN to modify repository content
permissions:
  contents: write

jobs:
  build_and_publish_test_update:
    runs-on: ubuntu-latest
    steps:
      # --- Checkout, Setup Java, Setup Flutter, Get Deps ---
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Fetch staging-versions branch
        run: |
          # Try to fetch the staging-versions branch if it exists
          git fetch origin staging-versions || echo "Branch doesn't exist yet, will create it"
          
          # Check if the branch exists locally after fetching
          if git rev-parse --verify --quiet origin/staging-versions; then
            # If it exists, create a local branch based on it
            git checkout -b staging-versions origin/staging-versions
          else
            # If it doesn't exist, create a new branch
            git checkout -b staging-versions
          fi

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '18'

      - name: Set up Flutter 3.27.4
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.4'
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      # --- Build Test APK ---
      - name: Build Test APK
        env:
          KEYSTORE_FILE: upload-keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          # Decode Keystore
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          chmod 644 android/app/upload-keystore.jks
          
          # Build test flavor APK
          flutter build apk --flavor staging --release -t lib/main_test.dart --dart-define=GITHUB_PAT=${{ secrets.GH_PAT_FOR_RELEASES }}
          
          # Display APK information for debugging (using bundletool instead of aapt)
          echo "APK information:"
          echo "---------------"
          # Use the bundletool that's already available in the Android SDK
          # Check file size as a simple verification
          ls -lh build/app/outputs/flutter-apk/app-staging-release.apk

      # --- Create Artifacts Directory ---
      - name: Setup version directory
        run: |
          VERSION=${{ github.event.inputs.version }}
          # Create both version-specific directory and latest directory
          mkdir -p staging-versions/v$VERSION
          mkdir -p staging-versions/latest
          # Copy APK to version-specific directory
          cp build/app/outputs/flutter-apk/app-staging-release.apk staging-versions/v$VERSION/app-staging-release.apk
          # Also copy to latest directory for easier reference
          cp build/app/outputs/flutter-apk/app-staging-release.apk staging-versions/latest/app-staging-release.apk

      # --- Generate version.json ---
      - name: Generate version.json
        run: |
          VERSION=${{ github.event.inputs.version }}
          FORCE_UPDATE=${{ github.event.inputs.force_update }}
          
          # Create repo URL variables for the raw content
          REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d "/" -f 1)
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d "/" -f 2)
          
          # Create JSON content
          JSON_CONTENT='{
            "version": "'$VERSION'",
            "apk_url": "https://api.github.com/repos/'$REPO_OWNER'/'$REPO_NAME'/contents/staging-versions/v'$VERSION'/app-staging-release.apk?ref=staging-versions",
            "force_update": '$FORCE_UPDATE'
          }'
          
          # Write to both version-specific and latest locations
          echo "$JSON_CONTENT" > staging-versions/v$VERSION/version.json
          echo "$JSON_CONTENT" > staging-versions/latest/version.json
          
          # Display the contents for verification
          cat staging-versions/latest/version.json

      # --- Commit and Push to Test Branch ---
      - name: Commit and push test version
        run: |
          VERSION=${{ github.event.inputs.version }}
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add files and commit
          git add staging-versions/
          git commit -m "Add staging app version $VERSION"
          
          # Push to branch (we're already on the staging-versions branch)
          git push origin staging-versions 